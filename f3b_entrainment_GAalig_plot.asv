%% Entrainment gamma rFT
% PhD project 1
%
%
% entrainment condition
% Plot Grandaverage TFR

% This script:
% loads in the results of the Grandavergae TFR in the gammatron+flicker condition
% aligned to the participant's IGF 

% [c] student: K. Duecker
%              katharina.duecker@uni-oldenburg.de
%              University of Oldenburg, Germany
%
% supervisor: O. Jensen
%             University of Birmingham, UK
%             Center for Human Brain Health

%% PLOT
%set(groot, 'defaultAxesTickLabelInterpreter','remove');
clear all; close all; clc
MAINPATH = 'Z:\';
oneof = 0;
sliwin = .5;
addpath(fullfile(MAINPATH,'fieldtrip'))
addpath(fullfile(MAINPATH,'matlab','template function'))
ft_defaults
BATCH = 3;
ticksize = 12;
labelsize = 16;
do_cb = 1;                  % colorbar?


TOIBSL = [-0.75 -0.25];                             % baseline
TOI = [2.25 3.75];
SUBJ = {};
IGF = [];
SOI_all = {};
numSens = [];

if oneof
    addstr = 'oneof';
else
    addstr = '';
end 
PATHENT = fullfile(MAINPATH,'results','power','entrainment',['Batch_',num2str(BATCH)],addstr);
PATHGAM = fullfile(MAINPATH,'results', 'power','gammatron',['Batch_',num2str(BATCH)]);
PATHPLOT = fullfile(MAINPATH, 'results','plots', 'power','entrainment',['Batch_',num2str(BATCH)],addstr);
mkdir(PATHPLOT)

if sliwin > .5
    addstr = 'long slidewin';
else
    addstr = '';
end

PATHENT = fullfile(PATHENT,addstr);
PATHPLOT = fullfile(PATHPLOT,addstr);
mkdir(PATHPLOT)
% read in subjects
folds = dir(PATHENT);
for f = 1:length(folds)
    SUBJ = [SUBJ;folds(f).name];
end
SUBJ(find(~strncmp(SUBJ,'201',3))) = [];

for s = 1:length(SUBJ)
    load(fullfile(PATHGAM, SUBJ{s}, 'SOI_freq.mat'))                        % load individual Gamfreq
    IGF(s) = gamFreq;
    SOI_all{s} = SOI;
    numSens(s) = numel(SOI);
    clear SOI gamFreq
end

% find min and max IGF
minIGF = min(IGF(IGF > 0));
maxIGF = max(IGF);

leftLim = minIGF - 52;
rightLim = 20-leftLim-2;

%test: keep subjects whose IGF is > 56
keepSUBJ = SUBJ(find(IGF > 56));
exclSUBJ = SUBJ(find(IGF < 56));
SOI_all = SOI_all(find(IGF > 56));
IGF = IGF(find(IGF > 56));

SUBJ = keepSUBJ;
%find min and max IGF
minIGF = min(IGF);
maxIGF = max(IGF);

leftLim = minIGF - 52;

freqvec = -leftLim:1/sliwin:20-leftLim-2;



load(fullfile(PATHENT,['GA_align_bsl',num2str(TOIBSL(1)),'_sliwi_',num2str(sliwin),'.mat']))

ncol = 5;
nrow = 2;
h = figure;
set(gcf, 'Position', [0, 0, 1920, 1080/2])
cfg = [];
cfg.parameter = 'powspctrm';
cfg.colormap = 'jet';
cfg.zlim = [-2 2];
%cfg.xlim = [TFRGA{1}.time(1) TFRGA{1}.time(end)-0.25];
cfg.baseline = 'no';
cfg.title = '';
%cfg.ylim = [-leftLim:2:rightLim];
for t = 1:length(TFRGAent)
    subplot(nrow,ncol,t)
    % cfg.colorbar = 'no';
    if find(t == [ncol:ncol:length(TFRGAent)])
       % cfg.colorbar = 'yes';
       cfg.colorbar = 'no';
    else
     cfg.colorbar = 'no';
    end
    ft_singleplotTFR(cfg,TFRGAent{t})
    xlim([-0.5 5.5])
    xticks([])
    if freqvec(t) < 0
        title([''])
        % title(['Entrainment at IGF - ', num2str(abs(TFRGAcmb{t}.freq(t))), ', Grandaverage'], 'FontSize', 10', 'FontWeight', 'normal', 'FontName', 'Arial');
        hold on
        % mark flicker freq
    line(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)), repmat(freqvec(t),1,length(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)))), 'Color', 'black', 'LineStyle', '-.', 'LineWidth',1.5)
    % mark gamma freq
    line(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)), repmat(0,1,length(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)))), 'Color', 'black', 'LineStyle', '--', 'LineWidth',1.5)
    
    %      line(TFRcmb{t}.time, repmat(10,1,length(TFRcmb{t}.time)), 'Color', 'blue', 'LineStyle', '--')
    % set x axis for lower row
    text(-0.5,freqvec(t),'RFT', 'FontSize', ticksize,'FontName', 'Arial')
    text(-0.5,0,'IGF', 'FontSize', ticksize, 'FontName', 'Arial')
    elseif freqvec(t) == 0
        title([''])
      %  title(['Entrainment at IGF, Grandaverage'], 'FontSize', 10, 'FontWeight', 'normal', 'FontName', 'Arial');
        hold on  
        line(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)), repmat(freqvec(t),1,length(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)))), 'Color', 'black', 'LineStyle', '-.', 'LineWidth',1.5)
    text(-0.5,0,'IGF', 'FontSize', ticksize, 'FontName', 'Arial')

    elseif freqvec(t) > 0
    title([''])
        %   title(['Entrainment at IGF + ', num2str(TFRGAcmb{t}.freq(t)), ', Grandaverage'],'FontSize', 10', 'FontWeight', 'normal', 'FontName', 'Arial');
    hold on
        % mark flicker freq
    line(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)), repmat(freqvec(t),1,length(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)))), 'Color', 'black', 'LineStyle', '-.', 'LineWidth',1.5)
    % mark gamma freq
    line(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)), repmat(0,1,length(TFRGAent{t}.time(find(TFRGAent{t}.time>=0.1)))), 'Color', 'black', 'LineStyle', '--', 'LineWidth',1.5)
    
    %      line(TFRcmb{t}.time, repmat(10,1,length(TFRcmb{t}.time)), 'Color', 'blue', 'LineStyle', '--')
    % set x axis for lower row
    text(-0.5,freqvec(t),'RFT', 'FontSize', ticksize,'FontName', 'Arial')
    text(-0.5,0,'IGF', 'FontSize', ticksize,'FontName', 'Arial')
    
    end

    % x axis label
    if t > length(TFRGAent)-ncol
        xlabel('time [s]')
        xticks([0:5])

    end

    if find(t == [1:ncol:length(TFRGAent)])
        ylabel({'Frequency';'IGF +[Hz]'})

    end
%     if find(t == [ncol:ncol:length(TFRGA)])
%     end
   %yticklabels({'-8','-6','-4','-2','0','2','4','6','8','10','12','14'})
%    
%    if mod(t,2)
%        yticks([-6:4:14]) 
%    else
%       yticks([-4:4:12])
%    end

   
    b = gca;
    b.FontSize = ticksize;
    b.FontName = 'Arial';
    b.XLabel.FontSize = labelsize;
    b.YLabel.FontSize = labelsize;
    
    if do_cb
        if find(t == [ncol:ncol:length(TFRGAent)])
            cb = colorbar;
            cb.FontSize = ticksize;
            cb.FontName = 'Arial';
            cb.Label.String = {'relative power'; 'change'};
            cb.Label.FontSize = labelsize;
        end
    end
    
end

if do_cb
    print(h, fullfile('X:\Manuscript','TFRGA_ent_IGF_cb'),'-depsc','-r1000');
else
    print(h, fullfile('X:\Manuscript','TFRGA_ent_IGF'),'-depsc','-r1000');
    print(h, fullfile(PATHPLOT,['TFRGA_ent_IGF']),'-depsc','-r1000');
end

%savefig(h, fullfile(PATHPLOT,['TFR_GA_ent.fig']))

clear TFRGAcmb TFRGAgrad TFR TFRal sens_map freqIGF 

close all

%% "Christoph's spectra"
freqID = [-6, -4, 4, 6, 10, 12];
allFreq = TFRGAent{1}.freq;
clear TFRGAent;
load(fullfile(PATHENT,['GA_spectrum_FOI_std_bsl',num2str(TOIBSL(1)),'.mat']))
% TFRsel = TFRGAent(find(ismember(allFreq,freqID)));
% 
% % plot standard deviation -> average over time first for each participant
% cfg = [];
% cfg.latency =  [2.5 3.5];
% cfg.avgovertime = 'yes';
% for f = 1:size(TFRsel,1)
%     for s = 1:size(TFRsel,2)
%         AVspec{f,s} = ft_selectdata(cfg,TFRsel{f,s});
%     end
% end
% % grandaverage and standard deviation
% cfg = [];
% cfg.paramter = 'powspctrm';
% for f = 1:size(AVspec,1)
%     GAsel{f} = ft_freqgrandaverage(cfg, AVspec{f,:});
%     for s = 1:size(AVspec,2)
%         SDsel(s,:,f) =  AVspec{f,s}.powspctrm;
%     end
% end
% SDSPEC = squeeze(std(SDsel,1));
h1 = figure;
set(gcf, 'Position', [0, 0, 1920, 1080/2])
for a = 1:length(freqID)/3%length(AVspec)
    subplot(1,length(freqID)/3,a)
    shadedErrorBar(AVspec{a}.freq,AVspec{a}.powspctrm,SDSPEC(:,a)','lineprops',{'k-','markerfacecolor','r'})
   % plot(AVspec{a}.freq,AVspec{a}.powspctrm,'k')
    hold on
    line(repmat(freqID(a),length(AVspec{1}.powspctrm),1),linspace(0,14,length(AVspec{a}.powspctrm)),'Color', 'black', 'LineStyle', '-.')
    xlabel('IGF + [Hz]')
    if a == 1
    ylabel('relative power change [a.u.]')
    %yticks([0:8])
    else
        yticks([])
    end
    xlim([-6 12])
    xticks([-6:2:12])
    ylim([0 14])
    
    a = gca;
    a.FontName = 'Arial';
    a.FontSize = 12;
    a.XLabel.FontSize = 16;
    a.YLabel.FontSize = 16;
end
% 
% 
h2 = figure;
set(gcf, 'Position', [0, 0, 1920, 1080/2])
for a = 1:length(freqID)/3%length(AVspec)
    subplot(1,length(freqID)/3,a)
    b = a + 2;
    shadedErrorBar(AVspec{b}.freq,AVspec{b}.powspctrm,SDSPEC(:,b)','lineprops',{'k-','markerfacecolor','r'})

   % plot(AVspec{a+2}.freq,AVspec{a+2}.powspctrm,'k')
    hold on
    line(repmat(freqID(b),length(AVspec{1}.powspctrm),1),linspace(0,14,length(AVspec{b}.powspctrm)),'Color', 'black', 'LineStyle', '-.')
    xlabel('IGF + [Hz]')
    
        yticks([])
    
    xlim([-6 12 ])
    xticks([-6:2:12])
    ylim([0 14])
    
    a = gca;
    a.FontName = 'Arial';
    a.FontSize = 12;
    a.XLabel.FontSize = 16;
    a.YLabel.FontSize = 16;
end

h3 = figure;
set(gcf, 'Position', [0, 0, 1920, 1080/2])
for a = 1:length(freqID)/3%length(AVspec)
    subplot(1,length(freqID)/3,a)
    b = a + 4;
    shadedErrorBar(AVspec{b}.freq,AVspec{b}.powspctrm,SDSPEC(:,b)','lineprops',{'k-','markerfacecolor','r'})

   % plot(AVspec{a+2}.freq,AVspec{a+2}.powspctrm,'k')
    hold on
    line(repmat(freqID(b),length(AVspec{1}.powspctrm),1),linspace(0,14,length(AVspec{b}.powspctrm)),'Color', 'black', 'LineStyle', '-.')
    xlabel('IGF + [Hz]')
    
        yticks([])
    
    xlim([-6 12 ])
    xticks([-6:2:12])
    ylim([0 14])
    
    a = gca;
    a.FontName = 'Arial';
    a.FontSize = 12;
    a.XLabel.FontSize = 16;
    a.YLabel.FontSize = 16;
end

print(h1, fullfile(PATHPLOT,['TFRGA_avg_spectra_1']),'-dsvg','-r300')
print(h1, fullfile(PATHPLOT, ['TFRGA_avg_spectra_1']),'-dpng','-r300')
print(h2, fullfile(PATHPLOT,['TFRGA_avg_spectra_2']),'-dsvg','-r300')
print(h2, fullfile(PATHPLOT, ['TFRGA_avg_spectra_2']),'-dpng','-r300')
print(h3, fullfile(PATHPLOT,['TFRGA_avg_spectra_2']),'-dsvg','-r300')
print(h3, fullfile(PATHPLOT, ['TFRGA_avg_spectra_2']),'-dpng','-r300')

%% Correlation: alpha power with RFT power and IGF power
gam_pow = [];
alpha_pow = [];
for f = 1:size(TFRgam_ga,2)
    % replace with one sensor (to be able to compute GA)
    for s = 1:length(SUBJ)
        gam_pow(s,f) = TFRgam_ga{s,f}.powspctrm(find(TFRgam_ga{s,f}.freq == flickfreq(f)));                % power at RFT
        alpha_pow(s,f) = mean(TFRalph_ga{s,f}.powspctrm(find(ismember(TFRalph_ga{s,f}.freq, [8,10,12]))));
     end
end

gam_pow_IGF = [];
alpha_pow_IGF = [];
for f = 1:size(TFR_gam_ga_IGF,2)
    % replace with one sensor (to be able to compute GA)
    for s = 1:length(SUBJ)
        gam_pow_IGF(s,f) = TFR_gam_ga_IGF{s,f}.powspctrm(find(TFR_gam_ga_IGF{s,f}.freq == IGF(s)));         % power at IGF
        alpha_pow_IGF(s,f) = mean(TFR_alpha_ga_IGF{s,f}.powspctrm(find(ismember(TFR_alpha_ga_IGF{s,f}.freq, [8,10,12]))));
    end
end

% correlation
cc_alpha_RFT = corrcoef(alpha_pow,gam_pow)
cc_alpha_gamma = corrcoef(alpha_pow_IGF,gam_pow_IGF)

save(fullfile(PATHENT,'alpha_gamma_correlation.mat'),'gam_pow','alpha_pow','gam_pow_IGF','alpha_pow_IGF','cc_alpha_RFT','cc_alpha_gamma')




